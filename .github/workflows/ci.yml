name: ✅ CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: 🏗️ Build and Validate
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Security Audit
      run: npm audit --audit-level=high --production
      continue-on-error: true
      
    - name: 🏗️ Build Production Site
      run: npm run build
      
    - name: 🧪 Validate Build Output
      run: |
        echo "🔍 Validating build output..."
        
        # Check if essential files exist
        test -f dist/index.html || (echo "❌ Missing index.html" && exit 1)
        test -f dist/products.html || (echo "❌ Missing products.html" && exit 1)
        test -f dist/about.html || (echo "❌ Missing about.html" && exit 1)
        test -f dist/contact.html || (echo "❌ Missing contact.html" && exit 1)
        test -f dist/404.html || (echo "❌ Missing 404.html" && exit 1)
        test -f dist/assets/css/style.css || (echo "❌ Missing CSS file" && exit 1)
        test -f dist/assets/js/site.js || (echo "❌ Missing JS file" && exit 1)
        test -f dist/sw.js || (echo "❌ Missing service worker" && exit 1)
        test -f dist/manifest.json || (echo "❌ Missing PWA manifest" && exit 1)
        test -f dist/sitemap.xml || (echo "❌ Missing sitemap" && exit 1)
        test -f dist/robots.txt || (echo "❌ Missing robots.txt" && exit 1)
        
        echo "✅ All essential files present!"
        
        # Check file sizes
        echo "📊 Build size analysis:"
        du -sh dist/
        du -sh dist/assets/
        
        # List all files
        echo "📂 Built files:"
        find dist/ -type f -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" | sort
        
    - name: 📊 Bundle Analysis
      run: |
        echo "📊 Analyzing bundle sizes..."
        npm run analyze || echo "Bundle analysis completed"
        
    - name: 🧪 Basic Functionality Test
      run: |
        echo "🧪 Testing basic functionality..."
        
        # Start a local server
        cd dist
        npx serve . &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test if pages are accessible
        curl -f http://localhost:3000/ || (echo "❌ Homepage not accessible" && exit 1)
        curl -f http://localhost:3000/products.html || (echo "❌ Products page not accessible" && exit 1)
        curl -f http://localhost:3000/about.html || (echo "❌ About page not accessible" && exit 1)
        curl -f http://localhost:3000/contact.html || (echo "❌ Contact page not accessible" && exit 1)
        
        # Clean up
        kill $SERVER_PID
        
        echo "✅ All pages are accessible!"
        
    - name: 📤 Upload Build Artifacts
      if: matrix.node-version == 20
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/
        retention-days: 7
        
    - name: ✅ Build Success Summary
      run: |
        echo "## ✅ Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Build Details (Node.js ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependencies installed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Production build generated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All essential files validated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Basic functionality tested" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ matrix.node-version }}" == "20" ]; then
          echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Production build uploaded as artifact" >> $GITHUB_STEP_SUMMARY
          echo "- Ready for manual deployment" >> $GITHUB_STEP_SUMMARY
        fi

  quality-checks:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: production-build
        path: dist/
        
    - name: 🔍 SEO Validation
      run: |
        echo "🔍 Checking SEO elements..."
        
        FILES=("dist/index.html" "dist/products.html" "dist/about.html" "dist/contact.html")
        
        for file in "${FILES[@]}"; do
          echo "Checking: $file"
          
          # Check for title tag
          if grep -q "<title>" "$file"; then
            echo "✅ Title tag found in $file"
          else
            echo "⚠️ Missing title tag in $file"
          fi
          
          # Check for meta description
          if grep -q 'name="description"' "$file"; then
            echo "✅ Meta description found in $file"
          else
            echo "⚠️ Missing meta description in $file"
          fi
          
          # Check for Open Graph tags
          if grep -q 'property="og:' "$file"; then
            echo "✅ Open Graph tags found in $file"
          else
            echo "⚠️ Missing Open Graph tags in $file"
          fi
        done
        
        echo "✅ SEO validation completed"
        
    - name: 🛡️ Security Check
      run: |
        echo "🛡️ Checking security configurations..."
        
        # Check for inline scripts (should be minimal)
        if grep -r "javascript:" dist/ 2>/dev/null; then
          echo "⚠️ Found javascript: protocols (security risk)"
        else
          echo "✅ No javascript: protocols found"
        fi
        
        # Check for external links security
        if grep -r 'target="_blank"' dist/ | grep -v 'rel="noopener noreferrer"' 2>/dev/null; then
          echo "⚠️ External links without proper security attributes"
        else
          echo "✅ External links properly secured"
        fi
        
        echo "✅ Security check completed"
        
    - name: 📊 Performance Preview
      run: |
        echo "📊 Performance indicators:"
        
        # File size analysis
        echo "📏 CSS size: $(stat -f%z dist/assets/css/style.css 2>/dev/null || stat -c%s dist/assets/css/style.css) bytes"
        echo "📏 JS size: $(stat -f%z dist/assets/js/site.js 2>/dev/null || stat -c%s dist/assets/js/site.js) bytes"
        
        # Count resources
        echo "📊 HTML pages: $(find dist/ -name "*.html" | wc -l)"
        echo "📊 CSS files: $(find dist/ -name "*.css" | wc -l)"
        echo "📊 JS files: $(find dist/ -name "*.js" | wc -l)"
        echo "📊 Images: $(find dist/ -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" | wc -l)"
        
        echo "✅ Ready for production deployment!"